/// -------------------------------------------------
/// ObjSchedule_if.h : 消息调度器对象公共头文件
/// -------------------------------------------------
/// Copyright (c) 2015, Wang Yujia <combo.xy@163.com>
/// All rights reserved.
/// -------------------------------------------------

#ifndef _OBJSCHEDULE_IF_H_
#define _OBJSCHEDULE_IF_H_

#include "Object_if.h"
#include "msg.h"


/////////////////////////////////////////////////////
///                '调度器'说明
/// -------------------------------------------------
/// '调度器'(schedule)主要有两种使用方式:
/// 1) 属于'对象管理器'(manager)下面的一个对象，为其他
///    对象之间的消息传递提供线程池均衡调度机制；这个
///    时候只能由'消息分发器'(dispatch)来进行调用的；
///    而且需要保证'发往同一个对象的消息依次达到'，要
///    先在接收缓存表中查找队列，再查找空闲的发送队列；
///    而且除了'Join'接口，不需要调用其他接口进行设置。
/// 2) 属于第三方的线程池调度机制，需要调用'SetProc'来
///    设置自己的消息处理回调函数；同时，如果不支持同一
///    目的一次到达的话，可以调用'SetSameDst'为false。
/////////////////////////////////////////////////////


/// -------------------------------------------------
/// 定义ISchedule版本号
/// -------------------------------------------------
INTF_VER(ISchedule, 1, 0, 0);


/// -------------------------------------------------
/// 调度接口
/// -------------------------------------------------
interface ISchedule : public IObject
{
    /// 消息处理回调
    typedef void (*PROC)(objMsg *msg, void *arg);

    /// 设置消息处理回调
    virtual void SetProc(PROC proc, void *arg) = 0;

    /// 设置是否支持同一目的依次到达
    virtual void SetSameDst(bool bOrderReach) = 0;

    /// 把消息加入调度器
    virtual DWORD Join(objMsg *message) = 0;
};


#endif // #ifndef _OBJSCHEDULE_IF_H_

